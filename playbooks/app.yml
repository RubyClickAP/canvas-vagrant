# app.yml
#   Canvas application setup
#
# This software is public domain.
#

- name: App Server system setup
  hosts: app
  sudo: yes
  tasks:
    - name: Create canvas application base directory
      file: state=directory dest={{ canvas_base_dir }} owner={{ canvas_service_account }} mode=0755

    - name: Install required packages
      apt: name={{ item }}
      with_items:
        - git-core
        - build-essential
        - unzip
        - imagemagick
        - zlib1g-dev
        - libxml2-dev
        - libmysqlclient-dev
        - libxslt1-dev
        - libpq-dev
        - libxmlsec1-dev
        - libcurl4-gnutls-dev
        - libxmlsec1
        - libsqlite3-dev


- name: App Server app setup
  hosts: app
  sudo: yes
  sudo_user: "{{ canvas_service_account }}"
  tasks:
    - name: Create application directory structure
      file: state=directory dest={{ item }} mode=0755
      with_items:
        - "{{ canvas_base_dir }}"

    - name: Deploy .gemrc
      copy: src=files/gemrc dest=~/.gemrc

    ######################################################################
    # anyenv setup
    #

    - name: Clone/update anyenv installation
      git: dest=~/.anyenv repo=https://github.com/riywo/anyenv.git

    - name: Clone/update anyenv-update plugin
      git: dest=~/.anyenv/plugins/anyenv-update repo=https://github.com/znz/anyenv-update.git

    - name: Add anyenv settings to anyenv.sh
      lineinfile: dest=~/anyenv.sh line='{{ item }}' create=yes
      with_items:
        - export PATH=$HOME/.anyenv/bin:$PATH
        - eval "$(anyenv init -)"

    - name: Add anyenv.sh call to .bashrc
      lineinfile: dest=~/.bashrc line='test -e ~/anyenv.sh && source ~/anyenv.sh'

    - name: Install appropriate **envs
      args:
        executable: /bin/bash
      register: install_env
      changed_when: install_env.stdout != ""
      with_items:
        - rbenv
        - ndenv
      shell: |
        source ~/anyenv.sh &&
        grep -qx {{ item }} <(anyenv envs) || anyenv install {{ item }}


    ######################################################################
    # ruby setup
    #

    - name: Install Ruby
      args:
        executable: /bin/bash
      register: install_ruby
      changed_when: install_ruby.stdout != ""
      environment:
        CONFIGURE_OPTS: "--disable-install-doc"
      shell: |
        source ~/anyenv.sh &&
        rbenv install -s {{ canvas_ruby_version }} &&
        rbenv global {{ canvas_ruby_version }}

    - name: Install bundler gem
      gem: executable={{ canvas_gem }} name={{ item.name }} version={{ item.version }} user_install=no
      with_items: canvas_base_gems

    - name: Rehash rbenv binaries
      args:
        executable: /bin/bash
      changed_when: False
      shell: |
        source ~/anyenv.sh &&
        rbenv rehash


    ######################################################################
    # node setup
    #

    - name: Install Node
      args:
        executable: /bin/bash
      register: install_node
      changed_when: install_node.stdout != ""
      shell: |
        source ~/anyenv.sh &&
        grep -qF " {{ canvas_node_version }} " <(ndenv versions) ||
        ndenv install {{ canvas_node_version }} &&
        ndenv global {{ canvas_node_version }}


    ######################################################################
    # canvas app setup
    #

    - name: Clone/update Canvas source
      git: dest={{ canvas_app_dir }} repo={{ canvas_src_url }} version={{ canvas_src_tag }}

    - name: Install bundled gems
      args:
        executable: /bin/bash
      shell: |
        source ~/anyenv.sh &&
        cd "{{ canvas_app_dir }}"
        bundle install --path=vendor/gems --binstubs=bin

    - name: Deploy configuration
      template: src=templates/config/{{ item }}.yml dest={{ canvas_conf_dir }}/{{ item }}.yml mode=0640
      with_items:
        - database
        - delayed_jobs
        - domain
        - file_store
        - outgoing_mail
        - security
        - external_migration
